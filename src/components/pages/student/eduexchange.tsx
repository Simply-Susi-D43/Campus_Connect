// import { useState, useEffect } from 'react'; import { useNavigate } from 'react-router-dom'; import { Home, Buildings, LinkIcon} from 'lucide-react'; interface StudentData { name: string; rollNo: string; department: string; year: string; section: string; email: string; accommodation: string; block?: string; roomNo?: string; phone?: string; } interface EduResource { id: string; title: string; description: string; category: string; subject: string; type: 'notes' | 'assignment' | 'project' | 'book' | 'video' | 'link' | 'question-paper'; fileUrl?: string; linkUrl?: string; thumbnailUrl?: string; uploaderName: string; uploaderEmail: string; uploadDate: string; downloads: number; likes: number; views: number; tags: string[]; semester: string; year: string; department: string; isMyResource: boolean; isLiked: boolean; status: 'pending' | 'approved' | 'rejected'; fileSize?: string; rating: number; reviews: Review[]; } interface Review { id: string; reviewerName: string; rating: number; comment: string; date: string; } interface NavigationItem { name: string; icon: React.ReactNode; path: string; } function EduExchangePage() { const navigate = useNavigate(); const [isSidebarOpen, setIsSidebarOpen] = useState(false); const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false); const [isHovering, setIsHovering] = useState(false); const [activeItem, setActiveItem] = useState('EduExchange'); const [currentView, setCurrentView] = useState<'browse' | 'upload' | 'my-resources'>('browse'); const [selectedCategory, setSelectedCategory] = useState<string>('all'); const [selectedSubject, setSelectedSubject] = useState<string>('all'); const [selectedType, setSelectedType] = useState<string>('all'); const [searchQuery, setSearchQuery] = useState(''); const [showFilters, setShowFilters] = useState(false); const [selectedResource, setSelectedResource] = useState<EduResource | null>(null); const [resources, setResources] = useState<EduResource[]>([]); const [sortBy, setSortBy] = useState<'recent' | 'popular' | 'rating'>('recent'); // Upload form state const [uploadForm, setUploadForm] = useState({ title: '', description: '', category: '', subject: '', type: 'notes' as 'notes' | 'assignment' | 'project' | 'book' | 'video' | 'link' | 'question-paper', semester: ''s: '', linkUrl: '', file: null as File | null }); const [isSubmitting, setIsSubmitting] = useState(false); // Get student data from localStorage const [studentData] = useState<StudentData>(() => { try { const userData = localStorage.getItem('userData'); if (userData) { const parsed = JSON.parse(userData); return { name: parsed.name || 'John Doe', rollNo: parsed.rollNo || '20CS001', department: parsed.department || 'Computer Science Engineering', year: parsed.year || '3rd Year', section: parsed.section || 'A', email: parsed.email || 'student@sece.ac.in', accommodation: parsed.accommodation || 'Hostel', block: parsed.block || 'A Block', roomNo: parsed.roomNo || 'A-201', phone: parsed.phone || '+91 9876543210' }; } } catch (error) { console.error('Error parsing user data:', error); } return { name: "John Doe", rollNo: "20CS001", department: "Computer Science Engineering", year: "3rd Year", section: "A", email: "student@sece.ac.in", accommodation: "Hostel", block: "A Block", roomNo: "A-201", phone: "+91 9876543210" }; }); const navigationItems: NavigationItem[] = [ { name: 'Home', icon: <Home size={20} />, path: '/student/home' }, { name: 'Announcements', icon: <Bell size={20} />, path: '/student/announcements' }, { name: 'Lost & Found', icon: <Bell size={20} />, path: '/student/lost-found' }, { name: studentData.accommodation === 'Hostel' ? 'Hostel Complaint' : 'Travel Complaint', icon: <Building size={20} />, path: '/student/hostelcomplaint' }, { name: 'Timetable Reminder', icon: <Calendar size={20} />, path: '/student/timetable' }, { name: 'EduExchange', icon: <BookOpen size={20} />, path: '/student/edu-exchange' }, { name: 'StudyConnect', icon: <Users size={20} />, path: '/student/study-connect' }, { name: 'GrowTogether', icon: <TrendingUp size={20} />, path: '/student/grow-together' }, { name: 'Profile', icon: <User size={20} />, path: '/student/profile' } ]; const categories = [ 'Academic Notes', 'Assignments', 'Projects', 'Reference Books', 'Video Lectures', 'Question Papers', 'Study Materials', 'Research Papers' ]; const subjects = [ 'Data Structures', 'Database Management', 'Computer Networks', 'Operating Systems', 'Software Engineering', 'Computer Architecture', 'Mathematics III', 'Professional Communication', 'Environmental Studies' ]; const resourceTypes = [ { value: 'notes', label: 'Notes', icon: <FileText size={16} /> }, { value: 'assignment', label: 'Assignment', icon: <Edit3 size={16} /> }, { value: 'project', label: 'Project', icon: <Star size={16} /> }, { value: 'book', label: 'Book', icon: <BookOpen size={16} /> }, { value: 'video', label: 'Video', icon: <Video size={16} /> }, { value: 'link', label: 'Link', icon: <LinkIcon size={16} /> }, { value: 'question-paper', label: 'Question Paper', icon: <FileText size={16} /> } ]; // Load resources from localStorage useEffect(() => { const savedResources = localStorage.getItem('eduExchangeResources'); if (savedResources) { setResources(JSON.parse(savedResources)); } else { // Default resources data (keeping the existing default data structure) const defaultResources: EduResource[] = [ // ... your existing default resources data ]; setResources(defaultResources); localStorage.setItem('eduExchangeResources', JSON.stringify(defaultResources)); } }, [studentData]); const handleNavClick = (itemName: string, path?: string) => { setActiveItem(itemName); setIsSidebarOpen(false); if (path && path !== '/student/edu-exchange') { navigate(path); } }; const handleLogout = () => { if (window.confirm('Are you sure you want to logout?')) { localStorage.removeItem('authToken'); localStorage.removeItem('userData'); navigate('/login'); } }; const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => { const { name, value } = e.target; setUploadForm(prev => ({ ...prev, [name]: value })); }; const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => { if (e.target.files && e.target.files[0]) { setUploadForm(prev => ({ ...prev, file: e.target.files![0] })); } }; const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); if (!uploadForm.title || !uploadForm.description || !uploadForm.category || !uploadForm.subject) { alert('Please fill in all required fields.'); return; } if (uploadForm.type !== 'link' && !uploadForm.file) { alert('Please upload a file or provide a link.'); return; } if (uploadForm.type === 'link' && !uploadForm.linkUrl) { alert('Please provide a valid link URL.'); return; } setIsSubmitting(true); try { await new Promise(resolve => setTimeout(resolve, 2000)); const newResource: EduResource = { id: `EDU${String(resources.length + 1).padStart(3, '0')}`, title: uploadForm.title, description: uploadForm.description, category: uploadForm.category, subject: uploadForm.subject, type: uploadForm.type, fileUrl: uploadForm.type !== 'link' ? '#' : undefined, linkUrl: uploadForm.type === 'link' ? uploadForm.linkUrl : undefinederName: studentData.nameerEmail: studentData.emailDate: new Date().toISOString()s: 0, likes: 0, views: 0s: uploadForm.tags.split(',').map(tag => tag.trim()).filter(tag => tag), semester: uploadForm.semester, year: studentData.year, department: studentData.department, isMyResource: true, isLiked: false, status: 'approved', fileSize: uploadForm.file ? `${(uploadForm.file.size / 1024 / 1024).toFixed(1)} MB` : undefined, rating: 0, reviews: [] }; const updatedResources = [newResource, ...resources]; setResources(updatedResources); localStorage.setItem('eduExchangeResources', JSON.stringify(updatedResources)); // Reset form setUploadForm({ title: '', description: '', category: '', subject: '', type: 'notes', semester: ''s: '', linkUrl: '', file: null }); alert('Resource uploaded successfully!'); setCurrentView('browse'); } catch (error) { alert('Failed to upload resource. Please try again.'); } finally { setIsSubmitting(false); } }; const toggleLike = (resourceId: string) => { const updatedResources = resources.map(resource => { if (resource.id === resourceId) { return { ...resource, isLiked: !resource.isLiked, likes: resource.isLiked ? resource.likes - 1 : resource.likes + 1 }; } return resource; }); setResources(updatedResources); localStorage.setItem('eduExchangeResources', JSON.stringify(updatedResources)); }; const incrementViews = (resourceId: string) => { const updatedResources = resources.map(resource => { if (resource.id === resourceId) { return { ...resource, views: resource.views + 1 }; } return resource; }); setResources(updatedResources); localStorage.setItem('eduExchangeResources', JSON.stringify(updatedResources)); }; const openResourceModal = (resource: EduResource) => { incrementViews(resource.id); setSelectedResource(resource); }; const closeResourceModal = () => { setSelectedResource(null); }; // Filter and sort resources const filteredResources = resources.filter(resource => { const matchesSearch = resource.title.toLowerCase().includes(searchQuery.toLowerCase()) || resource.description.toLowerCase().includes(searchQuery.toLowerCase()) || resource.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase())); const matchesCategory = selectedCategory === 'all' || resource.category === selectedCategory; const matchesSubject = selectedSubject === 'all' || resource.subject === selectedSubject; const matchesType = selectedType === 'all' || resource.type === selectedType; const matchesView = currentView === 'browse' || (currentView === 'my-resources' && resource.isMyResource); return matchesSearch && matchesCategory && matchesSubject && matchesType && matchesView; }).sort((a, b) => { switch (sortBy) { case 'popular': return (b.downloads + b.likes) - (a.downloads + a.likes); case 'rating': return b.rating - a.rating; case 'recent': default: return new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime(); } }); const getUserInitials = (name: string): string => { if (!name || typeof name !== 'string') return 'JD'; const nameParts = name.trim().split(' '); if (nameParts.length === 1) { return nameParts[0].charAt(0).toUpperCase(); } return nameParts .slice(0, 2) .map(part => part.charAt(0).toUpperCase()) .join(''); }; const getFirstName = (name: string): string => { if (!name || typeof name !== 'string') return 'Student'; return name.trim().split(' ')[0]; }; const getTypeIcon = (type: string) => { const typeObj = resourceTypes.find(t => t.value === type); return typeObj?.icon || <FileText size={16} />; }; const getTypeColor = (type: string) => { switch (type) { case 'notes': return 'bg-blue-100 text-blue-800 border-blue-200'; case 'assignment': return 'bg-green-100 text-green-800 border-green-200'; case 'project': return 'bg-purple-100 text-purple-800 border-purple-200'; case 'book': return 'bg-orange-100 text-orange-800 border-orange-200'; case 'video': return 'bg-red-100 text-red-800 border-red-200'; case 'link': return 'bg-indigo-100 text-indigo-800 border-indigo-200'; case 'question-paper': return 'bg-yellow-100 text-yellow-800 border-yellow-200'; default: return 'bg-gray-100 text-gray-800 border-gray-200'; } }; const formatDate = (dateString: string) => { const date = new Date(dateString); const now = new Date(); const diffTime = Math.abs(now.getTime() - date.getTime()); const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); if (diffDays === 1) { return 'Today'; } else if (diffDays === 2) { return 'Yesterday'; } else if (diffDays <= 7) { return `${diffDays - 1} days ago`; } else { return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }); } }; const renderStars = (rating: number) => { return Array.from({ length: 5 }, (_, index) => ( <Star key={index} size={12} className={index < Math.floor(rating) ? 'text-yellow-500 fill-current' : 'text-gray-300'} /> )); }; const myResourcesCount = resources.filter(r => r.isMyResource).length; // Rest of your JSX remains the same... return ( <> {/* Your existing JSX structure with the corrected imports */} </> ); } export default EduExchangePage; 



